#!/usr/bin/env sh

temp_dir=$(pwd)
cd /tmp

download_latest_github () {
    latest_tag=$(curl -s https://api.github.com/repos/$1/$2/releases/latest | sed -Ene '/^ *"tag_name": *"(v.+)",$/s//\1/p')
    echo "Installing from github.com/$1/$2 using version $latest_tag"
    curl -JLO https://github.com/$1/$2/archive/$latest_tag.tar.gz
    github_link=https://github.com/$1/$2/archive/$latest_tag.tar.gz
}

install_from_download () {
    tar -xvf $1
    mv $2 $HOME/.local/bin/
}

if uname | grep -q 'Darwin'; then

    if ! command -v brew &> /dev/null
    then
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    fi

    #----------------------------------------------------------------------------

    brew_list=`brew list`

    PACKAGES_BASE="kotlin espeak flac wget bpytop yarn docker-machine openjdk texlab kubernetes-cli
    minikube pdftoipe kubectx bat pandoc texlive htop kotlin-language-server terraform-lsp lua-language-server
    terraform terraformer act findutils gnupg neovim fzf ripgrep tmux xclip cmake go node"
    PACKAGES=""

    for p in $PACKAGES_BASE; do
        if ! echo "$brew_list" | grep -q "$p" ; then
            PACKAGES="$PACKAGES $p"
        fi
        # PACKAGES=${PACKAGES//$p/}
    done;
    echo stuff to install $PACKAGES
    if [ -z "$PACKAGES " ]; then
        brew install $PACKAGES
    fi

    #----------------------------------------------------------------------------

    # specific mac stuff
    if ! command -v yabai &> /dev/null; then
        echo Installing yabai
        # brew install koekeishiya/formulae/yabai --HEAD
    fi
    if ! command -v skhd &> /dev/null; then
        echo Installing skhd
        # brew install koekeishiya/formulae/skhd
    fi
    if ! echo "$brew_list" | grep -q "font-fontawesome"; then
        brew install --cask font-fontawesome
    fi
    if ! echo "$brew_list" | grep -q "font-hack-nerd-font"; then
        brew install --cask font-hack-nerd-font
    fi
fi
#----------------------------------------------------------------------------

# installing more language servers
if ! command -v gopls &> /dev/null; then
    go install golang.org/x/tools/gopls@latest
fi
if ! command -v bash-language-server &> /dev/null; then
    npm i -g bash-language-server
fi
if ! command -v pyright &> /dev/null; then
    pip3 install pyright
fi
if ! command -v yaml-language-server &> /dev/null; then
    yarn global add yaml-language-server
fi
if ! command -v vscode-html-language-server &> /dev/null; then
    npm i -g vscode-langservers-extracted
fi
if ! command -v graphql-lsp &> /dev/null; then
    npm install -g graphql-language-service-cli
fi
if ! command -v typescript-language-server &> /dev/null; then
    npm install -g typescript typescript-language-server
fi
if ! command -v docker-langserver &> /dev/null; then
    npm install -g dockerfile-language-server-nodejs
fi
if ! command -v terraform-lsp &> /dev/null; then
    echo downloading latest github terraform-lsp
    download_latest_github juliosueiras terraform-lsp
    echo $github_link
    echo "installing file terraform-lsp-$latest_tag.tar.gz"
    install_from_download terraform-lsp-$latest_tag.tar.gz terraform-lsp
fi
if ! command -v vim-language-server &> /dev/null; then
    npm install -g vim-language-server
fi

#----------------------------------------------------------------------------

# installing install_ completions
if ! command -v cargo &> /dev/null; then
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
    rustup install nightly
    rustup default nightly
fi
if ! grep -q "/go/bin" $HOME/.zshrc ; then
    echo 'export PATH="\$PATH:\$HOME/go/bin"' >> $HOME/.zshrc
fi
if [ ! -d "$HOME/.oh-my-zsh" ] ; then
    echo installing Oh My ZSH
    sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
fi
if [ ! -d "$HOME/.local/share/nvim/plugged" ] ; then
    echo installing neovim vim plug
    sh -c 'curl -fLo "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
fi
if [ ! -d "$HOME/.tmux/plugins/tpm" ] ; then
    echo installing tmux plugin manager
	# git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
fi

# brew install node@16
# brew link --overwrite node@16

cd $temp_dir
