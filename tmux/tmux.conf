set -g prefix C-a
unbind C-b
set -s escape-time 1

set -g base-index 1
setw -g pane-base-index 1
set -g renumber-windows off

# Quiet
set-option -g visual-activity off
set-option -g visual-bell off
set-option -g visual-silence off
set-window-option -g monitor-activity off
set-option -g bell-action none

set -g mouse on

set -g default-terminal "screen-256color"

# The default repeat limit is 500 milliseconds, and can be changed by setting the repeat-time option to a higher value.

# Window Splits{{
bind c new-window -c "$HOME"
# tried to set up hooks {{
# export isVscodeShell=1

# tmux set-hook -t $SESSION after-new-session 'if [ -z ${var+x} ] "bind c new-window -c \"#{pane_current_path}\"'
# tmux set-hook -g after-new-window 'if [ -z ${var+x} ] "bind c new-window -c \"#{pane_current_path}\"'
# tmux set-hook -t $SESSION session-created 'if [ -z ${var+isVscodeShell} ] "bind c new-window -c \"#{pane_current_path}\""'
# tmux set-hook -g after-new-window 'if [ -z ${var+isVscodeShell} ] "bind c new-window -c \"#{pane_current_path}\""'
# if [ -z ${var+x} ]
# thought about setting up hooks for prefix c for vscode sessions
# set-hook -g after-new-session 'if [ -z ${var+x} ] "bind c new-window -c \"#{pane_current_path}\"'
# set-hook -g after-new-window 'if [ -z ${var+x} ] "bind c new-window -c \"#{pane_current_path}\"'
# set-hook -g after-new-window 'if -F "#{==:#{session_name},emacs}" "source ~/.tmux/.tmux.conf.emacs" "source ~/.tmux/.tmux.conf.amos"'
# set-hook -g after-new-window 'if -F "#{==:#{session_name},emacs}" "source ~/.tmux/.tmux.conf.emacs" "source ~/.tmux/.tmux.conf.amos"'
# }}

bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"
unbind %
# unbind \"
#}}
# Pane {{
# Move direction like vim
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# Cycle left or right
bind -r C-h select-window -t :-
bind -r C-l select-window -t :+

# Resize Panes, only have to press prefix once
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5
#}}
# Status Line {{
# Colors {{
set -g status-style fg=white,bold,bg=colour237

setw -g window-status-style fg=cyan,bg=black
setw -g window-status-current-style fg=colour232,bold,bg=colour154

set -g message-style fg=white,bold,bg=colour136

# Use this to set active window in background style
# setw -g window-status-activity-style

# }}
# Layout {{
# Status line left side to show Session:window:pane
set -g status-left-length 20
set -g status-left "#[fg=green]#S #[fg=cyan]Pn: #P"

set -g status-justify centre

wg_battery="#{battery_status_fg} #{battery_icon} #{battery_percentage}"
set -g @batt_color_full_charge "#[fg=$color_level_ok]"
set -g @batt_color_high_charge "#[fg=$color_level_ok]"
set -g @batt_color_medium_charge "#[fg=$color_level_warn]"
set -g @batt_color_low_charge "#[fg=$color_level_stress]"
# set -g status-right-style "fg=cyan"
set -g status-right "#{prefix_highlight} $wg_is_keys_off $wg_is_zoomed #{sysstat_cpu} | #{sysstat_mem} |$wg_battery"
# | $wg_user_host  #{online_status}"
# }}
# Automatically set window title
setw -g automatic-rename

# Set window notifications
setw -g monitor-activity on

# Sends message to tmux bar
# set -g visual-activity on
set -g display-time 2000

# This actually works 👏
# if-shell -b '[ -z ${TSLINETIME+x} ]' "set -g status-interval 2"
set -g status-interval "$linetime"


#}}
# Other Visuals{{
setw -g pane-border-style fg=green,bg=black
setw -g pane-active-border-style fg=white,bg=yellow

# These overide terminal backgrounds
# setw -g window-style fg=colour240,bg=colour235
# setw -g window-active-style fg=white,bg=black

#}}
# Bindings {{

# Breaks pane to new window
bind N break-pane
bind r source-file ~/.tmux.conf \; display-message "Reloaded!"
bind C-a send-prefix
bind W setw automatic-rename
# bind M split-window -h "vim ~/.tmux.conf"

# Use vim keybindings in copy mode
setw -g mode-keys vi

# }}
# Copying Stuff{{
# # Setup 'v' to begin selection as in Vim
# bind-key -t vi-copy v begin-selection
# bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"
#
# # Update default binding of `Enter` to also use copy-pipe
# unbind -t vi-copy Enter
# bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"
#
#
# ## ~/.tmux.conf
# #---------------------------------------------------------------------
#
# set-option -s set-clipboard off
# bind P paste-buffer
# bind-key -T copy-mode-vi v send-keys -X begin-selection
# bind-key -T copy-mode-vi y send-keys -X rectangle-toggle
# unbind -T copy-mode-vi Enter
# bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel 'xclip -se c -i'
# bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel 'xclip -se
# }}
# Plugins {{
set -g @plugin 'tmux-plugins/tpm'
# prefix + alt + u to remove unlisted plugins
# prefix + U   to upgrade

# for vim
set -g @resurrect-strategy-vim 'session'
# if nvim
if-shell -F '[type nvim > /dev/null 2>&1;]'\
  "set -g @resurrect-strategy-nvim 'session'"


# List of plugins
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'samoshkin/tmux-plugin-sysstat'
set -g @plugin 'tmux-plugins/tmux-battery'

set -g @plugin 'tmux-plugins/tmux-resurrect'
# prefix + I to fetch plugin
# prefix + Ctrl-s - save
# prefix + Ctrl-r - restore

set -g @plugin 'christoomey/vim-tmux-navigator'
run '~/.tmux/plugins/tpm/tpm'
# Other examples:
# set -g @plugin 'github_username/plugin_name'
# set -g @plugin 'git@github.com:user/plugin'
# set -g @plugin 'git@bitbucket.com:user/plugin'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'

#}}
