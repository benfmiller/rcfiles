set -g prefix C-a
unbind C-b
set -s escape-time 1

set -g base-index 1
setw -g pane-base-index 1
set -g renumber-windows off
# movew -r to renumber all windows once

# Quiet
set-option -g visual-activity off
set-option -g visual-bell off
set-option -g visual-silence off
set-window-option -g monitor-activity off
set-option -g bell-action none
set-option -g default-shell /bin/zsh

set -g mouse on

set -g default-terminal "screen-256color"

# The default repeat limit is 500 milliseconds, and can be changed by setting the repeat-time option to a higher value.

# Window Splits{{
bind c new-window -c "$HOME"
# tried to set up hooks {{
# export isVscodeShell=1

# tmux set-hook -t $SESSION after-new-session 'if [ -z ${var+x} ] "bind c new-window -c \"#{pane_current_path}\"'
# tmux set-hook -g after-new-window 'if [ -z ${var+x} ] "bind c new-window -c \"#{pane_current_path}\"'
# tmux set-hook -t $SESSION session-created 'if [ -z ${var+isVscodeShell} ] "bind c new-window -c \"#{pane_current_path}\""'
# tmux set-hook -g after-new-window 'if [ -z ${var+isVscodeShell} ] "bind c new-window -c \"#{pane_current_path}\""'
# if [ -z ${var+x} ]
# thought about setting up hooks for prefix c for vscode sessions
# set-hook -g after-new-session 'if [ -z ${var+x} ] "bind c new-window -c \"#{pane_current_path}\"'
# set-hook -g after-new-window 'if [ -z ${var+x} ] "bind c new-window -c \"#{pane_current_path}\"'
# set-hook -g after-new-window 'if -F "#{==:#{session_name},emacs}" "source ~/.tmux/.tmux.conf.emacs" "source ~/.tmux/.tmux.conf.amos"'
# set-hook -g after-new-window 'if -F "#{==:#{session_name},emacs}" "source ~/.tmux/.tmux.conf.emacs" "source ~/.tmux/.tmux.conf.amos"'
# }}

bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"
bind c new-window -c "#{pane_current_path}"
unbind %
# unbind \"
#}}
# Pane {{
# Move direction like vim
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# Cycle left or right
bind -r C-h select-window -t :-
bind -r C-l select-window -t :+

# Resize Panes, only have to press prefix once
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5
#}}
# Status Line {{
# Colors {{
set -g status-style fg=white,bold,bg=colour237

setw -g window-status-style fg=colour182,bg=black
setw -g window-status-current-style fg=colour232,bold,bg=colour154

set -g message-style fg=white,bold,bg=colour136

bind C-u set -g status-bg colour54
bind C-i set -g status-bg colour237

# Use this to set active window in background style
# setw -g window-status-activity-style

# }}
# Layout {{
# Status line left side to show Session:window:pane
set -g status-left-length 20
set -g status-left "#[fg=green]#S #[fg=cyan]Pn: #P"

set -g status-justify centre

wg_battery="#{battery_status_fg} #{battery_icon} #{battery_percentage}"
set -g @batt_color_full_charge "#[fg=$color_level_ok]"
set -g @batt_color_high_charge "#[fg=$color_level_ok]"
set -g @batt_color_medium_charge "#[fg=$color_level_warn]"
set -g @batt_color_low_charge "#[fg=$color_level_stress]"
set -g status-right-style "fg=cyan"
# set -g status-right "#{prefix_highlight} $wg_is_keys_off $wg_is_zoomed #{sysstat_cpu} | #{sysstat_mem} |$wg_battery"
set -g status-right-length 65
set -g status-right "#{prefix_highlight} $wg_is_keys_off $wg_is_zoomed #{=22:pane_title} | #[fg=colour253]%H:%M %a-%d:%h #[fg=cyan]| #{sysstat_mem} |$wg_battery"
# for the kali or non windows
# set -g status-right "#{prefix_highlight} $wg_is_keys_off $wg_is_zoomed #{=22:pane_title} | #[fg=colour253]%H:%M %a-%d #[fg=cyan]| #{sysstat_cpu} | #{sysstat_mem} "
# with battery
# set -g status-right "#{prefix_highlight} $wg_is_keys_off $wg_is_zoomed #{=22:pane_title} | #[fg=colour253]%H:%M %a-%d #[fg=cyan]| #{sysstat_cpu} | #{sysstat_mem} |$wg_battery"

# This doesn't quite work with the plugins as they never load back, but it changes prompt!
# bind C-i set status-right "#{=21:pane_title} | #{sysstat_mem} |$wg_battery"; source-file ~/.tmux_plugins.conf
# bind C-o set status-right " #{=21:pane_title} %H:%M %d-%b-%y"
# | $wg_user_host  #{online_status}"
# }}
# Automatically set window title
setw -g automatic-rename

# Set window notifications
setw -g monitor-activity on

# Sends message to tmux bar
# set -g visual-activity on
set -g display-time 2000

# This actually works 👏
set -g status-interval 15
if-shell -b '[ -z ${linetime+x} ]' "set -g status-interval ${linetime}"


#}}
# Other Visuals{{
setw -g pane-border-style fg=green,bg=black
setw -g pane-active-border-style fg=white,bg=yellow

# These overide terminal backgrounds
# setw -g window-style fg=colour240,bg=colour235
# setw -g window-active-style fg=white,bg=black

#}}
# Bindings {{

# Breaks pane to new window
bind N break-pane
bind r source-file ~/.tmux.conf \; display-message "Reloaded!"
bind C-a send-prefix
bind W setw automatic-rename

bind -r i run-shell "tmux neww ~/rcfiles/scripts/tmux_ch.sh"
bind -r g run-shell "tmux neww ~/rcfiles/scripts/tmux_switcher.sh"
bind -r e run-shell "tmux neww ~/rcfiles/scripts/one_command.sh"

bind y run-shell -b "tmux show-buffer | clip.exe || tmux show-buffer | xclip -se c -i" \; display-message "Copied tmux buffer to system clipboard"
# if-shell -b '! command -v xclip &> /dev/null' "bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel 'xclip -se c -i'"
# if-shell -b '! command -v xclip &> /dev/null' "bind y run-shell -b 'tmux show-buffer | clip.exe' \; display-message 'Copied tmux buffer to system clipboard'"

# bind M split-window -h "vim ~/.tmux.conf"
# Use vim keybindings in copy mode
setw -g mode-keys vi
# sets to ctrl alt p, doesn't work with vscode
# bind-key -n 'C-M-p' copy-mode
bind C-v copy-mode

# }}
# Copying Stuff{{
# # Setup 'v' to begin selection as in Vim
# bind-key -t vi-copy v begin-selection
# bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"
#
# # Update default binding of `Enter` to also use copy-pipe
# unbind -t vi-copy Enter
# bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"
#
#
# ## ~/.tmux.conf
# #---------------------------------------------------------------------
#
# set-option -s set-clipboard off
# bind P paste-buffer
# bind-key -T copy-mode-vi v send-keys -X begin-selection
# bind-key -T copy-mode-vi y send-keys -X rectangle-toggle
# unbind -T copy-mode-vi Enter
# bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel 'xclip -se c -i'
# bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel 'xclip -se
# }}

# if-shell 'test -n "$SSH_CLIENT"' \   'source-file ~/rcfiles/tmux/tmux.remote.conf'
bind -n C-q send-prefix


# bind -T root F12  \
#     set prefix None \;\
#     # jet key-table off \;\
#     jefresh-client -S \;\
#     # set status-style "fg=$color_status_text,bg=$color_window_off_status_bg" \;\
#     set window-status-current-format "#[fg=$color_window_off_status_bg,bg=$color_window_off_status_current_bg]$separator_powerline_right#[default] #I:#W# #[fg=$color_window_off_status_current_bg,bg=$color_window_off_status_bg]$separator_powerline_right#[default]" \;\
#     set window-status-current-style "fg=$color_dark,bold,bg=$color_window_off_status_current_bg" \;\
#     if -F '#{pane_in_mode}' 'send-keys -X cancel' \;\

# bind -T off F12 \
#   set -u prefix \;\
#   # set -u key-table \;\
#   # set -u status-style \;\
#   set -u window-status-current-style \;\
#   set -u window-status-current-format \;\
